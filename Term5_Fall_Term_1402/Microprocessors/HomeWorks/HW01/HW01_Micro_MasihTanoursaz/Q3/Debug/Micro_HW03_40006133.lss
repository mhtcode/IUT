
Micro_HW03_40006133.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000063e  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a1  00000000  00000000  00000832  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a2  00000000  00000000  00000dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001078  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000349  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  00001435  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000014ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
#include <avr/interrupt.h>
#include <util/delay.h>
#define F_CPU 8000000UL
#define TRUE 1

ISR(INT0_vect) {
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
		PORTC++;
  78:	85 b3       	in	r24, 0x15	; 21
  7a:	8f 5f       	subi	r24, 0xFF	; 255
  7c:	85 bb       	out	0x15, r24	; 21
}
  7e:	8f 91       	pop	r24
  80:	0f 90       	pop	r0
  82:	0f be       	out	0x3f, r0	; 63
  84:	0f 90       	pop	r0
  86:	1f 90       	pop	r1
  88:	18 95       	reti

0000008a <__vector_2>:

ISR(INT1_vect) {
  8a:	1f 92       	push	r1
  8c:	0f 92       	push	r0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	0f 92       	push	r0
  92:	11 24       	eor	r1, r1
  94:	8f 93       	push	r24
		PORTC--;
  96:	85 b3       	in	r24, 0x15	; 21
  98:	81 50       	subi	r24, 0x01	; 1
  9a:	85 bb       	out	0x15, r24	; 21
}
  9c:	8f 91       	pop	r24
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

000000a8 <createPulse>:

void createPulse() {
	PORTD ^= (1 << PD4);
  a8:	92 b3       	in	r25, 0x12	; 18
  aa:	80 e1       	ldi	r24, 0x10	; 16
  ac:	89 27       	eor	r24, r25
  ae:	82 bb       	out	0x12, r24	; 18
  b0:	08 95       	ret

000000b2 <main>:
}



int main() {
	PORTC = 0x00;
  b2:	15 ba       	out	0x15, r1	; 21
	DDRC = 0xFF;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	84 bb       	out	0x14, r24	; 20
	
	DDRD |= (1 << PD4);
  b8:	81 b3       	in	r24, 0x11	; 17
  ba:	80 61       	ori	r24, 0x10	; 16
  bc:	81 bb       	out	0x11, r24	; 17

	
	GICR |= (1 << INT0) | (1 << INT1);
  be:	8b b7       	in	r24, 0x3b	; 59
  c0:	80 6c       	ori	r24, 0xC0	; 192
  c2:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01) | (1 << ISC00) ; 
  c4:	85 b7       	in	r24, 0x35	; 53
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC11) | (1 << ISC10);
  ca:	85 b7       	in	r24, 0x35	; 53
  cc:	8c 60       	ori	r24, 0x0C	; 12
  ce:	85 bf       	out	0x35, r24	; 53
	sei(); 
  d0:	78 94       	sei
	while (TRUE) {
		if (PORTC > 100 && PORTC < 200) {
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	85 36       	cpi	r24, 0x65	; 101
  d6:	e8 f3       	brcs	.-6      	; 0xd2 <main+0x20>
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	88 3c       	cpi	r24, 0xC8	; 200
  dc:	d0 f7       	brcc	.-12     	; 0xd2 <main+0x20>
			createPulse();
  de:	0e 94 54 00 	call	0xa8	; 0xa8 <createPulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f e9       	ldi	r18, 0x9F	; 159
  e4:	86 e8       	ldi	r24, 0x86	; 134
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x36>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x40>
  f2:	00 00       	nop
  f4:	ee cf       	rjmp	.-36     	; 0xd2 <main+0x20>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
